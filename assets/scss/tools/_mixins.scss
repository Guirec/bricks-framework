//
// Mixins
// -----------------------------------------------------------------------------

// Font-face
// -----------------------------------------------------------------------------

@mixin font-face(
  $font-name,
  $font-local-1,
  $font-local-2,
  $font-path,
  $font-file,
  $font-weight: normal,
  $font-style: normal
) {
  font-weight: $font-weight;
  font-family: $font-name;
  font-style: $font-style;
  font-display: "swap";
  src: local($font-local-1), local($font-local-2),
    url("../../fonts/#{$font-path}/#{$font-file}.woff2") format("woff2"),
    url("../../fonts/#{$font-path}/#{$font-file}.woff") format("woff");
}

// Breakpoints
// -----------------------------------------------------------------------------

// Makes the @content apply to the given breakpoint and wider
// No query for the smallest breakpoint
@mixin breakpoint-up($name, $breakpoints: $breakpoint-map) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Makes the @content apply to the given breakpoint and narrower
// No query for the largest breakpoint
@mixin breakpoint-down($name, $breakpoints: $breakpoint-map) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Makes the @content apply between the min and max breakpoints
@mixin breakpoint-between($lower, $upper, $breakpoints: $breakpoint-map) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Makes the @content apply only to the given breakpoint only
@mixin breakpoint-only($name, $breakpoints: $breakpoint-map) {
  $min: breakpoint-min($name, $breakpoints);
  $next: breakpoint-next($name, $breakpoints);
  $max: breakpoint-max($next);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include breakpoint-down($next, $breakpoints) {
      @content;
    }
  }
}

// Utilities generator
// -----------------------------------------------------------------------------

@mixin generate-utilities($utilities) {
  @each $breakpoint in map-keys($breakpoint-map) {
    // Generate media query if needed
    @include breakpoint-up($breakpoint) {
      $prefix: breakpoint-prefix($breakpoint, $breakpoint-map);

      // Loop over each utility property
      @each $key, $utility in $utilities {
        // The utility can be disabled with `false`, thus check if the utility is a map first
        // Only proceed if responsive media queries are enabled or if it's the base media query
        @if type-of($utility) ==
          "map" and
          (map-get($utility, responsive) or $prefix == "")
        {
          @include generate-utilities-classes($utility, $prefix);
        }
      }
    }
  }
}

@mixin generate-utilities-classes($utility, $prefix) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(
      map-has-key($utility, class),
      map-get($utility, class),
      nth($properties, 1)
    );
    $property-class: if($property-class == null, "", $property-class);

    // Don't prefix if value key is null
    $property-class-modifier: if(
      $key,
      if($property-class == "", "", "-") + $key,
      ""
    );

    @if $value != null {
      .#{$prefix + $property-class + $property-class-modifier} {
        @each $property in $properties {
          #{$property}: $value;
        }
      }
    }
  }
}
